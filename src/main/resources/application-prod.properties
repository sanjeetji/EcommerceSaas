# --- Server ---
# Railway expects you to bind to $PORT
server.port=${PORT:8080}

# --- DB (PROD) ---
# Prefer Railway's injected MySQL vars if present; otherwise fall back to generic DB_* envs.
spring.datasource.url=${MYSQL_URL:jdbc:mysql://${MYSQLHOST:${DB_HOST}}:${MYSQLPORT:${DB_PORT:3306}}/${MYSQLDATABASE:${DB_NAME:ecommerce_db}}}?sslMode=REQUIRED&serverTimezone=UTC
spring.datasource.username=${MYSQLUSER:${DB_USER}}
spring.datasource.password=${MYSQLPASSWORD:${DB_PASSWORD}}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# --- JPA / Hibernate ---
spring.jpa.hibernate.ddl-auto=update
# Let Boot pick the dialect automatically (works with MySQL 8). You can uncomment if you want it explicit.
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.open-in-view=false

# --- Logging (prod) ---
logging.level.com.saas.ecommerce=INFO
logging.level.org.springframework.web=INFO

# --- Sessions / Cache ---
# On Railway (no Redis), store sessions in DB and use in-memory cache to avoid Redis connections.
app.session.store=db
app.session.ttl-days=30
spring.cache.type=simple

# --- Redis (disable repos and health to remove noise; keep client optional if you still include the starter) ---
spring.data.redis.repositories.enabled=false
management.health.redis.enabled=false
# Leave these empties; if you later add Up stash/Redis, set them via env
# spring.redis.host=${REDIS_HOST:}
# spring.redis.port=${REDIS_PORT:6379}
# spring.redis.password=${REDIS_PASSWORD:}
# spring.redis.ssl=${REDIS_SSL:true}

# --- JWT secret (PROD: from env) ---
jwt.secret=${JWT_SECRET}
jwt.expiry.access=900
jwt.expiry.refresh=604800
jwt.rotation.enabled=false
